# note person some

Python系统维护着一个常见的“整数常量池”即 -5 ~ 255

# Linux 查看文件属性
lsattr
chattr

# windows gitbash use 'python' command
vim ~/.bashrc
alias python="winpty python.exe"

lsmod                 # 查看载入的模块
modprobe xxx.ko       # 加载某个模块
modprobe -r xxx.ko    # 卸载某个模块


Linux root use rsa  secret_key
查询后发现可以，步骤如下：
1.创建一个新用户，并为其设置密码
2.设置root用户密钥登录（网上很多教程）
3.修改/etc/ssh/sshd_config
PermitRootLogin without-password （设置root用户只能用密钥登录）
PasswordAuthentication yes （其他用户可以使用密码登录）
修改后记得重启服务器
4.最后一步很重要，使用root用户设置这两个文件的权限，防止普通用户篡改密钥文件
chattr +i ~/.ssh/authorized_keys
chattr +i ~/.ssh

==========================================================================================
# Python dict 更新，拼接 update()
data = {}
data.update({'a': 123})

# python dis 模块， dis.dis() 将python代码 展示为 机器码


In [1]: def foo():
   ...:     a = '1'
   ...:     b = '2'
   ...:     b += a
   ...:     return b
   ...:

In [2]: def bar():
   ...:     a = '1'
   ...:     b = '2'
   ...:     b = b + a
   ...:     return b
   ...:


In [3]: import dis


In [4]: dis.dis(foo)
  2           0 LOAD_CONST               1 ('1')
              2 STORE_FAST               0 (a)

  3           4 LOAD_CONST               2 ('2')
              6 STORE_FAST               1 (b)

  4           8 LOAD_FAST                1 (b)
             10 LOAD_FAST                0 (a)
             12 INPLACE_ADD
             14 STORE_FAST               1 (b)

  5          16 LOAD_FAST                1 (b)
             18 RETURN_VALUE


In [5]: dis.dis(bar)
  2           0 LOAD_CONST               1 ('1')
              2 STORE_FAST               0 (a)

  3           4 LOAD_CONST               2 ('2')
              6 STORE_FAST               1 (b)

  4           8 LOAD_FAST                1 (b)
             10 LOAD_FAST                0 (a)
             12 BINARY_ADD
             14 STORE_FAST               1 (b)

  5          16 LOAD_FAST                1 (b)
             18 RETURN_VALUE

In [6]:

第一列：对应的源代码行数。
第二列：对应的内存字节码的索引位置。
       在第一列和第二列之间的 >> 号表示跳转的目标
第三列：内部机器代码的操作。
第四列：指令参数。
第五列：实际参数。

===============================================================================

Python 解释器，你写的每一行 Python 代码都是由它负责执行，
解释器由一个编译器和一个虚拟机构成，编译器负责将源代码转换成字节码文件，而虚拟机负责执行字节码，
所以，解释型语言其实也有编译过程，只不过这个编译过程并不是直接生成目标代码，
而是中间代码（字节码），然后再通过虚拟机来逐行解释执行字节码。

Python代码首先会编程一个字节码文件，再由虚拟机逐行解释，把每一行字节码代码翻译成目标指令给CPU执行。
 
nonlocal声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量。

def nonlocal_test():
   count = 0
   def test2():
      nonlocal count
      count += 1
      return count
   return test2

val = nonlocal_test()
print(val())
print(val())
print(val())


RESTful API
REST，是指REpresentational State Transfer，有个精辟的解释什么是RESTful：

   看URL就知道要什么

   看Method就知道干什么

   看Status Code就知道结果如何

良好的RESTful API设计的基本原则是：

   返回JSON

   严禁乱用状态码

   处理好分页

   返回具体的实体数据而不是返回通用的JSON数据

   请求对象有默认值


# numpy.int64 not issubclass int
# numpy.float64 issubclass float

In [1]: import numpy as np

In [2]: issubclass(np.float, float)
Out[2]: True

In [3]: issubclass(np.float16, float)
Out[3]: False

In [4]: issubclass(np.float32, float)
Out[4]: False

In [5]: issubclass(np.float64, float)
Out[5]: True

In [6]: issubclass(np.int, int)
Out[6]: True

In [7]: issubclass(np.int32, int)
Out[7]: False

In [8]: issubclass(np.int0, int)
Out[8]: False

In [9]: issubclass(np.int16, int)
Out[9]: False

In [10]: issubclass(np.int8, int)
Out[10]: False

In [11]: issubclass(np.int64, int)
Out[11]: False

In [12]: